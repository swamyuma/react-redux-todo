{"version":3,"sources":["logo.svg","redux.js","components/TodoInput.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","todos","id","uuid","name","complete","store","createStore","state","action","type","payload","console","log","Object","objectSpread","concat","toConsumableArray","map","todo","filter","window","__REDUX_DEVTOOLS_EXTENSION__","style","theme","margin","TodoInput","props","_useState","useState","_useState2","slicedToArray","setTodo","dispatch","useDispatch","react_default","a","createElement","className","onSubmit","event","preventDefault","trim","addTodoAction","addTodo","class","value","placeholder","onChange","target","TodoList","useSelector","disptach","toggleTodo","todoId","toggleTodoAction","deleteTodo","deleteTodoAction","checked","onClick","bind","cursor","color","float","App","es","components_TodoInput","components_TodoList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdfd8aca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createStore } from \"redux\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nconst initialState = {\r\n  todos: [\r\n    {\r\n      id: uuid(),\r\n      name: \"Remove toxicity from your life\",\r\n      complete: false\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: \"Meditate to happiness\",\r\n      complete: true\r\n    }\r\n  ]\r\n};\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  initialState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nfunction reducer(state, action) {\r\n  const { type, payload } = action;\r\n  console.log(type, payload);\r\n  switch (type) {\r\n    case \"ADD_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, payload]\r\n      };\r\n    case \"TOGGLE_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo =>\r\n          todo.id === payload ? { ...todo, complete: !todo.complete } : todo\r\n        )\r\n      };\r\n    case \"DELETE_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter(todo => todo.id !== payload)\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// return an object with type and payload\r\nexport const addTodoAction = todo => ({\r\n  type: \"ADD_TODO\",\r\n  payload: todo\r\n});\r\n\r\nexport const toggleTodoAction = todoId => ({\r\n  type: \"TOGGLE_TODO\",\r\n  payload: todoId\r\n});\r\n\r\nexport const deleteTodoAction = todoId => ({\r\n  type: \"DELETE_TODO\",\r\n  payload: todoId\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTodoAction } from \"../redux\";\r\nimport uuid from \"uuid/v4\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst style = {\r\n  theme: {\r\n    margin: \"auto 10 10 auto\"\r\n  }\r\n};\r\n\r\nconst TodoInput = props => {\r\n  const [todo, setTodo] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const addTodo = todo => dispatch(addTodoAction(todo));\r\n\r\n  const onChange = event => {\r\n    setTodo(event.target.value);\r\n  };\r\n\r\n  const onSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(todo);\r\n    if (todo.trim() === \"\") return;\r\n    addTodo({\r\n      id: uuid(),\r\n      name: todo,\r\n      complete: false\r\n    });\r\n    setTodo(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container card card-body mb-3 ml-6 mr-6\">\r\n      <div className=\"card-header mb-3\">Add</div>\r\n      <form onSubmit={onSubmit} className={style.theme}>\r\n        <div class=\"form-group\">\r\n          <input\r\n            className=\"form-control mb-3\"\r\n            type=\"text\"\r\n            name=\"todo\"\r\n            value={todo}\r\n            placeholder=\"Normal input\"\r\n            onChange={onChange}\r\n          />\r\n\r\n          <div className=\"control\">\r\n            <button className=\"button is-link\">Add Todo</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTodoAction, deleteTodoAction } from \"../redux\";\r\n\r\nconst TodoList = () => {\r\n  const todos = useSelector(state => state.todos);\r\n  const disptach = useDispatch();\r\n  const toggleTodo = todoId => disptach(toggleTodoAction(todoId));\r\n  const deleteTodo = todoId => disptach(deleteTodoAction(todoId));\r\n\r\n  return (\r\n    <div className=\"container card card-body mb-3 ml-6 mr-6\">\r\n      <div className=\"card-header mb-3\">Todos</div>\r\n      {todos.map(todo => {\r\n        const { id, name, complete } = todo;\r\n        return (\r\n          <div className=\"card card-body mb-3 ml-6 mr-6\">\r\n            <div>\r\n              <input\r\n                className=\"mr-3\"\r\n                type=\"checkbox\"\r\n                checked={complete}\r\n                onClick={toggleTodo.bind(null, id)}\r\n              />\r\n              <span className={complete ? \"complete mr-6\" : null}>\r\n                {complete ? <del>{name}</del> : name}\r\n              </span>\r\n              <span\r\n                className=\"delete-button\"\r\n                onClick={deleteTodo.bind(null, id)}\r\n                style={{ cursor: \"pointer\", color: \"red\", float: \"right\" }}\r\n              >\r\n                X\r\n              </span>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\n//import './App.css';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux\";\n\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"main\">\n        <TodoInput />\n        <TodoList />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}